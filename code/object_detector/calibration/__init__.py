import time
from typing import List

from sklearn import preprocessing

from calibration.model_generator import generate_model, save_model
from calibration.read_calibration_data import read_calibration_data
from output_devices import NxtUsb
import matplotlib.pyplot as plt


def normalize(data):
    #scaler = preprocessing.StandardScaler()
    scaler = preprocessing.MinMaxScaler()
    output = scaler.fit_transform(data)
    output = [[x[0]*4 - 2] for x in output]
    return output, (scaler.data_min_, scaler.data_max_)

    #return preprocessing.scale(data)


def calibrate(usb_controller: NxtUsb):
    print("generate new data? (y/N)")
    if input() in ["y", "Y"]:
        packages = read_calibration_data(usb_controller)
        inp, expect_up, expect_down = zip(*(([p.position], [p.power_up], [p.power_down]) for p in packages))
        inp_up, expect_up_filtered = zip(*(x for x in zip(inp, expect_up) if 7 < x[1][0] < 30))
        inp_down, expect_down_filtered = zip(*(x for x in zip(inp, expect_down) if 7 < x[1][0] < 30))
        with open("up.dat", "w") as file:
            file.write(str(inp_up))
            file.write("\n\n")
            file.write(str(expect_up_filtered))
            file.write("\n\n")

        with open("down.dat", "w") as file:
            file.write(str(inp_down))
            file.write("\n\n")
            file.write(str(expect_down_filtered))
    else:
        inp_down = ([222], [218], [216], [214], [212], [210], [208], [206], [204], [202], [200], [198], [196], [194], [192], [190], [188], [186], [184], [182], [180], [178], [176], [174], [172], [170], [168], [166], [164], [162], [160], [158], [156], [154], [152], [150], [148], [146], [144], [142], [140], [138], [136], [134], [132], [130], [128], [126], [124], [122], [120], [118], [116], [114], [112], [110], [108], [106], [104], [102], [100], [98], [96], [94], [92], [90], [88], [86], [84], [82], [80], [76], [74], [72], [70], [68], [66], [64], [62], [60], [58], [56], [52], [50], [48], [46], [44], [42], [40], [38], [36], [34], [32], [30], [28], [26], [222], [218], [216], [214], [212], [210], [208], [206], [204], [202], [200], [198], [196], [194], [192], [190], [188], [186], [184], [182], [180], [178], [176], [174], [172], [170], [168], [166], [164], [162], [160], [158], [156], [154], [152], [150], [148], [146], [144], [142], [140], [138], [136], [134], [132], [130], [128], [126], [124], [122], [120], [118], [116], [114], [112], [110], [108], [106], [104], [102], [100], [98], [96], [94], [92], [90], [88], [86], [84], [82], [80], [76], [74], [72], [70], [68], [66], [64], [62], [60], [58], [56], [52], [48], [44], [42], [40], [38], [36], [34], [32], [30], [28], [26], [222], [218], [216], [214], [212], [210], [208], [206], [204], [202], [200], [198], [196], [194], [192], [190], [188], [186], [184], [182], [180], [178], [176], [174], [172], [170], [168], [166], [164], [162], [160], [158], [156], [154], [152], [150], [148], [146], [144], [142], [140], [138], [136], [134], [132], [130], [128], [126], [124], [122], [120], [118], [116], [114], [112], [110], [108], [106], [104], [102], [100], [98], [96], [94], [92], [90], [88], [86], [84], [82], [80], [76], [74], [72], [70], [68], [66], [64], [62], [60], [58], [56], [52], [50], [48], [46], [44], [42], [40], [38], [36], [34], [32], [30], [28], [26], [222], [218], [216], [214], [212], [210], [208], [206], [204], [202], [200], [198], [196], [194], [192], [190], [188], [186], [184], [182], [180], [178], [176], [174], [172], [170], [168], [166], [164], [162], [160], [158], [156], [154], [152], [150], [148], [146], [144], [142], [140], [138], [136], [134], [132], [130], [128], [126], [124], [122], [120], [118], [116], [114], [112], [110], [108], [106], [104], [102], [100], [98], [96], [94], [92], [90], [88], [86], [84], [82], [80], [78], [76], [74], [72], [70], [68], [66], [64], [62], [60], [58], [56], [52], [50], [48], [46], [44], [42], [40], [38], [36], [34], [32], [30], [28], [26], [222], [218], [216], [214], [212], [210], [208], [206], [204], [202], [200], [198], [196], [194], [192], [190], [188], [186], [184], [182], [180], [178], [176], [174], [172], [170], [168], [166], [164], [162], [160], [158], [156], [154], [152], [150], [148], [146], [144], [142], [140], [138], [136], [134], [132], [130], [128], [126], [124], [122], [120], [118], [116], [114], [112], [110], [108], [106], [104], [102], [100], [98], [96], [94], [92], [90], [88], [86], [84], [82], [80], [78], [76], [74], [72], [70], [68], [66], [64], [62], [60], [58], [56], [52], [50], [48], [44], [42], [40], [38], [36], [34], [32], [30], [28], [26])
        expect_down_filtered = ([8], [8], [9], [11], [10], [11], [9], [12], [12], [11], [12], [14], [13], [15], [14], [13], [15], [15], [16], [13], [16], [15], [17], [15], [15], [14], [16], [15], [16], [14], [14], [16], [15], [16], [16], [16], [14], [16], [15], [15], [14], [15], [10], [14], [14], [13], [12], [14], [14], [11], [13], [11], [14], [13], [10], [11], [9], [13], [12], [12], [10], [10], [11], [11], [10], [10], [9], [11], [10], [9], [9], [10], [9], [10], [8], [9], [10], [10], [9], [9], [8], [11], [9], [8], [9], [8], [10], [10], [9], [9], [11], [12], [11], [12], [15], [20], [8], [8], [9], [11], [10], [10], [9], [12], [12], [11], [13], [15], [14], [15], [12], [13], [14], [15], [16], [15], [16], [15], [17], [15], [15], [14], [16], [15], [16], [13], [15], [16], [16], [16], [14], [16], [14], [17], [15], [15], [14], [16], [12], [15], [15], [13], [14], [14], [14], [11], [13], [10], [14], [13], [11], [12], [9], [13], [12], [12], [10], [10], [11], [11], [10], [10], [9], [12], [10], [8], [9], [10], [9], [10], [8], [9], [10], [10], [9], [9], [8], [11], [9], [10], [9], [10], [9], [8], [11], [12], [11], [13], [12], [20], [8], [8], [9], [11], [10], [11], [9], [12], [12], [11], [13], [15], [12], [15], [15], [13], [15], [15], [16], [14], [16], [15], [18], [15], [15], [14], [12], [17], [16], [16], [15], [16], [15], [16], [13], [16], [15], [17], [15], [15], [14], [16], [10], [14], [15], [13], [14], [15], [15], [12], [13], [9], [14], [13], [11], [12], [9], [13], [12], [12], [10], [10], [11], [11], [10], [10], [9], [12], [10], [8], [9], [10], [10], [10], [9], [8], [10], [10], [9], [9], [8], [11], [8], [8], [8], [10], [9], [10], [9], [8], [11], [12], [12], [13], [15], [20], [8], [8], [9], [11], [10], [11], [9], [12], [12], [12], [13], [15], [13], [15], [14], [13], [15], [15], [16], [14], [16], [15], [18], [16], [15], [14], [16], [15], [16], [14], [15], [16], [16], [16], [14], [16], [15], [17], [15], [15], [14], [16], [13], [15], [14], [13], [14], [15], [15], [11], [13], [10], [14], [13], [13], [12], [14], [10], [11], [11], [10], [10], [11], [12], [10], [10], [9], [12], [10], [10], [9], [8], [10], [10], [10], [9], [8], [10], [10], [9], [9], [8], [11], [9], [9], [11], [8], [9], [10], [9], [8], [11], [12], [12], [13], [12], [20], [8], [8], [10], [11], [10], [10], [9], [12], [12], [12], [13], [14], [15], [15], [15], [13], [15], [16], [16], [14], [16], [15], [18], [16], [16], [14], [16], [16], [16], [14], [15], [17], [16], [16], [14], [17], [15], [17], [16], [13], [14], [16], [13], [15], [15], [13], [14], [15], [15], [13], [13], [10], [14], [14], [11], [12], [9], [13], [12], [12], [10], [10], [11], [12], [10], [10], [8], [12], [10], [10], [9], [8], [10], [10], [10], [8], [8], [10], [10], [9], [9], [8], [11], [9], [8], [9], [10], [10], [9], [8], [11], [12], [12], [13], [15], [21])
        expect_up_filtered = ([9], [8], [11], [10], [11], [10], [12], [13], [15], [16], [17], [19], [18], [20], [20], [19], [17], [18], [16], [19], [16], [17], [18], [18], [18], [16], [15], [16], [16], [16], [18], [17], [18], [16], [18], [15], [14], [14], [14], [14], [15], [16], [15], [15], [14], [15], [13], [15], [13], [15], [13], [12], [13], [13], [12], [12], [13], [13], [12], [12], [12], [10], [12], [11], [12], [10], [12], [10], [9], [11], [10], [11], [11], [12], [10], [12], [10], [12], [11], [12], [10], [9], [12], [11], [10], [13], [14], [14], [15], [14], [18], [17], [18], [19], [22], [8], [8], [11], [10], [11], [10], [10], [13], [15], [16], [17], [19], [17], [19], [19], [19], [17], [17], [16], [19], [16], [17], [17], [17], [16], [16], [14], [15], [16], [15], [17], [16], [17], [15], [17], [14], [15], [13], [13], [14], [14], [15], [14], [14], [13], [15], [12], [14], [12], [15], [12], [12], [12], [12], [12], [12], [12], [12], [12], [11], [12], [10], [12], [11], [11], [10], [9], [11], [11], [10], [10], [11], [11], [12], [10], [11], [10], [12], [11], [11], [10], [9], [11], [11], [10], [11], [13], [13], [13], [13], [16], [15], [17], [17], [21], [29], [24], [8], [8], [11], [10], [11], [10], [11], [13], [13], [16], [17], [19], [17], [19], [19], [19], [17], [17], [16], [18], [16], [17], [17], [17], [16], [16], [17], [16], [16], [15], [17], [16], [17], [15], [17], [14], [15], [13], [12], [14], [14], [15], [14], [14], [13], [15], [12], [14], [12], [14], [12], [11], [12], [11], [12], [11], [11], [12], [12], [11], [12], [10], [12], [11], [11], [10], [9], [11], [11], [10], [10], [10], [11], [11], [10], [11], [9], [12], [11], [11], [10], [9], [11], [11], [10], [11], [13], [13], [13], [13], [16], [14], [17], [17], [20], [29], [23], [8], [8], [11], [10], [11], [10], [9], [13], [15], [15], [17], [19], [17], [19], [19], [19], [17], [17], [16], [18], [16], [17], [17], [17], [16], [16], [16], [16], [16], [15], [17], [15], [17], [15], [17], [14], [15], [14], [13], [14], [14], [15], [14], [14], [13], [14], [12], [14], [12], [14], [12], [12], [12], [12], [11], [11], [11], [12], [12], [11], [12], [10], [12], [11], [11], [10], [10], [10], [11], [10], [10], [10], [11], [11], [10], [11], [9], [12], [11], [11], [10], [9], [11], [11], [10], [11], [12], [12], [13], [13], [15], [15], [17], [17], [20], [27], [23], [8], [8], [11], [10], [11], [9], [9], [13], [15], [16], [17], [19], [17], [19], [19], [19], [17], [17], [16], [18], [16], [17], [17], [16], [16], [15], [16], [15], [16], [15], [17], [15], [17], [15], [17], [13], [15], [14], [12], [13], [14], [15], [14], [14], [13], [14], [12], [14], [12], [14], [11], [14], [11], [10], [12], [11], [11], [12], [12], [11], [12], [10], [12], [10], [11], [10], [9], [11], [11], [10], [10], [10], [11], [11], [10], [11], [9], [12], [11], [11], [10], [9], [11], [11], [10], [11], [12], [12], [13], [13], [15], [14], [17], [16], [20], [27], [22])
        inp_up = ([20], [22], [24], [26], [28], [30], [32], [34], [36], [38], [40], [42], [44], [46], [48], [50], [52], [54], [56], [58], [60], [62], [64], [66], [68], [70], [72], [74], [76], [78], [80], [82], [84], [86], [88], [90], [92], [94], [96], [98], [100], [102], [104], [106], [108], [110], [112], [114], [116], [118], [120], [122], [124], [126], [128], [130], [132], [134], [136], [138], [140], [142], [144], [146], [148], [150], [152], [154], [156], [158], [160], [162], [164], [166], [168], [170], [172], [174], [176], [178], [180], [182], [184], [186], [188], [190], [192], [194], [196], [198], [200], [202], [204], [206], [208], [20], [22], [24], [26], [28], [30], [32], [34], [36], [38], [40], [42], [44], [46], [48], [50], [52], [54], [56], [58], [60], [62], [64], [66], [68], [70], [72], [74], [76], [78], [80], [82], [84], [86], [88], [90], [92], [94], [96], [98], [100], [102], [104], [106], [108], [110], [112], [114], [116], [118], [120], [122], [124], [126], [128], [130], [132], [134], [136], [138], [140], [142], [144], [146], [148], [150], [152], [154], [156], [158], [160], [162], [164], [166], [168], [170], [172], [174], [176], [178], [180], [182], [184], [186], [188], [190], [192], [194], [196], [198], [200], [202], [204], [206], [208], [212], [214], [20], [22], [24], [26], [28], [30], [32], [34], [36], [38], [40], [42], [44], [46], [48], [50], [52], [54], [56], [58], [60], [62], [64], [66], [68], [70], [72], [74], [76], [78], [80], [82], [84], [86], [88], [90], [92], [94], [96], [98], [100], [102], [104], [106], [108], [110], [112], [114], [116], [118], [120], [122], [124], [126], [128], [130], [132], [134], [136], [138], [140], [142], [144], [146], [148], [150], [152], [154], [156], [158], [160], [162], [164], [166], [168], [170], [172], [174], [176], [178], [180], [182], [184], [186], [188], [190], [192], [194], [196], [198], [200], [202], [204], [206], [208], [210], [214], [20], [22], [24], [26], [28], [30], [32], [34], [36], [38], [40], [42], [44], [46], [48], [50], [52], [54], [56], [58], [60], [62], [64], [66], [68], [70], [72], [74], [76], [78], [80], [82], [84], [86], [88], [90], [92], [94], [96], [98], [100], [102], [104], [106], [108], [110], [112], [114], [116], [118], [120], [122], [124], [126], [128], [130], [132], [134], [136], [138], [140], [142], [144], [146], [148], [150], [152], [154], [156], [158], [160], [162], [164], [166], [168], [170], [172], [174], [176], [178], [180], [182], [184], [186], [188], [190], [192], [194], [196], [198], [200], [202], [204], [206], [208], [210], [214], [20], [22], [24], [26], [28], [30], [32], [34], [36], [38], [40], [42], [44], [46], [48], [50], [52], [54], [56], [58], [60], [62], [64], [66], [68], [70], [72], [74], [76], [78], [80], [82], [84], [86], [88], [90], [92], [94], [96], [98], [100], [102], [104], [106], [108], [110], [112], [114], [116], [118], [120], [122], [124], [126], [128], [130], [132], [134], [136], [138], [140], [142], [144], [146], [148], [150], [152], [154], [156], [158], [160], [162], [164], [166], [168], [170], [172], [174], [176], [178], [180], [182], [184], [186], [188], [190], [192], [194], [196], [198], [200], [202], [204], [206], [208], [210], [214])


        # create plotting points.


    while True:
        inp_down, inp_down_min_max = normalize(inp_down)
        inp_up, inp_up_min_max = normalize(inp_up)
        expect_up_filtered, expect_up_filtered_min_max = normalize(expect_up_filtered)
        expect_down_filtered, expect_down_filtered_min_max = normalize(expect_down_filtered)
        inp = inp_up[:len(inp_down)//5]#[[x/100] for x in range(-200, 200)]

        model_up = generate_model(inp_up, expect_up_filtered)
        model_down = generate_model(inp_down, expect_down_filtered)

        res_up = [model_up.predict([x]) for x in inp]
        res_down = [model_down.predict([x]) for x in inp]

        plt.plot([x[0] for x in inp_up], expect_up_filtered, 'bo', label="Expected up")
        plt.plot([x[0] for x in inp_down], expect_down_filtered, 'ro', label="Expected down")
        plt.plot([x[0] for x in inp], res_up, label="Result up")
        plt.plot([x[0] for x in inp], res_down, label="Result down")
        plt.legend()
        plt.show()
        save_up = False
        save_down = False
        print("Accept? (y/N)")
        if input() in ['y', 'Y']:
            #print("mean input_up: ", inp_up.)
            save_model(model_up, inp_up_min_max, expect_up_filtered_min_max, "model_up")
            save_model(model_down, inp_down_min_max, expect_down_filtered_min_max, "model_down")
            break
