<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int 	N = 6;         // Number of tasks
typedef int[0,N-1] id_t;
const int factor = 1;

broadcast chan		    release[N], ready[N], stop;
urgent broadcast chan 	run[N];

chan priority ready &lt; default &lt; release;
clock time;

// All times are in microseconds 

const int T[N] = {  // Periods
    1000000, // BackgroundTask
    500000, // UpdateDisplayTask
    30000, // MoveMotorsTask
    30000,  // ReciveDataTask
    15000,  // HandleLaserTask
    1000   // KeepUSBAliveTask
};	       

const int D[N] = {  // Deadlines
    1000000, // BackgroundTask
    500000, // UpdateDisplayTask
    30000,  // MoveMotorsTask
    30000,  // ReciveDataTask
    15000,  // HandleLaserTask
    1000   // KeepUSBAliveTask
};	       

const int C[N] = {  // Computation Times
    8*factor,       // BackgroundTask
    90*factor,      // UpdateDisplayTask
    26417*factor,   // MoveMotorsTask
    72*factor,      // ReciveDataTask
    37*factor,      // HandleLaserTask
    32*factor       // KeepUSBAliveTask
};       

const int P[N] = {  // Priorities
    1,   // BackgroundTask
    2,   // UpdateDisplayTask
    3,   // MoveMotorsTask
    4,   // ReciveDataTask
    5,   // HandleLaserTask
    5    // KeepUSBAliveTask
};

bool running[N];
</declaration>
	<template>
		<name x="40" y="16">Task</name>
		<parameter>const id_t id</parameter>
		<declaration>clock c, t;
</declaration>
		<location id="id0" x="32" y="416" color="#ff00ff">
			<name x="8" y="425">Blocked</name>
			<label kind="invariant" x="8" y="442">c'==0</label>
		</location>
		<location id="id1" x="32" y="64">
			<name x="22" y="34">Idle</name>
			<label kind="invariant" x="51" y="42">t&lt;=T[id]</label>
		</location>
		<location id="id2" x="32" y="192" color="#ffa500">
			<name x="42" y="170">Ready</name>
		</location>
		<location id="id3" x="32" y="320" color="#00ff00">
			<name x="42" y="297">Running</name>
			<label kind="invariant" x="0" y="340">c&lt;=C[id]</label>
		</location>
		<location id="id4" x="221" y="323">
			<name x="173" y="300">Error</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="guard" x="156" y="419">t&gt;D[id]</label>
			<nail x="221" y="419"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="102" y="365">run[id]?</label>
			<label kind="assignment" x="100" y="379">running[id]=true</label>
			<nail x="96" y="416"/>
			<nail x="96" y="360"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-34" y="365">stop?</label>
			<label kind="assignment" x="-34" y="382">running[id]=false</label>
			<nail x="-42" y="357"/>
			<nail x="-42" y="416"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="42" y="85">t==T[id]</label>
			<label kind="synchronisation" x="42" y="102">ready[id]!</label>
			<label kind="assignment" x="42" y="119">t=0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="42" y="212">run[id]?</label>
			<label kind="assignment" x="42" y="229">c=0, 
running[id]=true</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-161" y="187">c==C[id]</label>
			<label kind="synchronisation" x="-161" y="170">release[id]!</label>
			<label kind="assignment" x="-161" y="204">running[id]=false</label>
			<nail x="-32" y="320"/>
			<nail x="-32" y="64"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="156" y="173">t&gt;D[id]</label>
			<nail x="221" y="195"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="122" y="326">t&gt;D[id]</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">Scheduler</name>
		<declaration>id_t list[N] = { 5, 4, 3, 2, 1, 0};
int[0,N] len = N;

// Put an element at the end of the queue
void enqueue(id_t element)
{
int tmp=0;
list[len++] = element;
if (len&gt;0)
{
	int i=len-1;
	while (i&gt;0 &amp;&amp; P[list[i]]&gt;P[list[i-1]])
	{
		tmp = list[i-1];
		list[i-1] = list[i];
		list[i] = tmp;
		i--;
	}		
}
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
id_t front()
{
   return list[0];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}</declaration>
		<location id="id5" x="161" y="170">
		</location>
		<location id="id6" x="51" y="170">
			<committed/>
		</location>
		<location id="id7" x="94" y="30">
			<committed/>
		</location>
		<location id="id8" x="94" y="94">
			<name x="55" y="71">Occ</name>
		</location>
		<location id="id9" x="94" y="-98">
			<name x="110" y="-130">Free</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="153" y="119">run[front()]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="85" y="178">stop!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="select" x="-34" y="102">e : id_t</label>
			<label kind="synchronisation" x="-34" y="118">ready[e]?</label>
			<label kind="assignment" x="-34" y="135">enqueue(e)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="102" y="46">run[front()]!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="select" x="198" y="-74">e : id_t</label>
			<label kind="guard" x="198" y="-58">e == front()</label>
			<label kind="synchronisation" x="198" y="-42">release[e]?</label>
			<label kind="assignment" x="198" y="-26">dequeue()</label>
			<nail x="190" y="94"/>
			<nail x="190" y="-98"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="6" y="-58">len &gt; 0</label>
			<label kind="synchronisation" x="6" y="-42">run[front()]!</label>
			<nail x="-2" y="-98"/>
			<nail x="-2" y="94"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="select" x="102" y="-66">e : id_t</label>
			<label kind="synchronisation" x="102" y="-50">ready[e]?</label>
			<label kind="assignment" x="102" y="-34">enqueue(e)</label>
		</transition>
	</template>
	<system>BackgroundTask    = Task( 0 );
UpdateDisplayTask = Task( 1 );
MoveMotorsTask    = Task( 2 );
ReciveDataTask    = Task( 3 );
HandleLaserTask   = Task( 4 );
KeepUSBAliveTask  = Task( 5 );

system BackgroundTask, UpdateDisplayTask, MoveMotorsTask, ReciveDataTask, HandleLaserTask, KeepUSBAliveTask, Scheduler;

gantt {
    BackgroundTask    : BackgroundTask.Ready -&gt; 5,    BackgroundTask.Running -&gt; 1,    BackgroundTask.Blocked -&gt;3, BackgroundTask.Error-&gt;6; 
    UpdateDisplayTask : UpdateDisplayTask.Ready -&gt; 5, UpdateDisplayTask.Running -&gt; 1, UpdateDisplayTask.Blocked -&gt;3, UpdateDisplayTask.Error-&gt;6; 
    MoveMotorsTask    : MoveMotorsTask.Ready -&gt; 5,    MoveMotorsTask.Running -&gt; 1,    MoveMotorsTask.Blocked -&gt;3, MoveMotorsTask.Error-&gt;6; 
    ReciveDataTask    : ReciveDataTask.Ready -&gt; 5,    ReciveDataTask.Running -&gt; 1,    ReciveDataTask.Blocked -&gt;3, ReciveDataTask.Error-&gt;6; 
    HandleLaserTask   : HandleLaserTask.Ready -&gt; 5,   HandleLaserTask.Running -&gt; 1,   HandleLaserTask.Blocked -&gt;3, HandleLaserTask.Error-&gt;6; 
    KeepUSBAliveTask  : KeepUSBAliveTask.Ready -&gt; 5,  KeepUSBAliveTask.Running -&gt; 1,  KeepUSBAliveTask.Blocked -&gt;3, KeepUSBAliveTask.Error-&gt;6; 
}
</system>
	<queries>
		<query>
			<formula>A[] not (BackgroundTask.Error)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not (UpdateDisplayTask.Error)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not (HandleLaserTask.Error)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not (MoveMotorsTask.Error)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not (ReciveDataTask.Error)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not (KeepUSBAliveTask.Error)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not (BackgroundTask.Error or UpdateDisplayTask.Error or HandleLaserTask.Error or MoveMotorsTask.Error or ReciveDataTask.Error or KeepUSBAliveTask.Error)
			</formula>
			<comment>Check that all tasks can not go into error state.
			</comment>
		</query>
		<query>
			<formula>A[] not  (KeepUSBAliveTask.Blocked and KeepUSBAliveTask.t &gt; 20)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:id_t) forall(j:id_t) running[i] &amp;&amp; running[j] imply i==j
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
